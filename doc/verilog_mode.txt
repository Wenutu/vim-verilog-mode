*verilog-mode.txt*       User manual for vim-verilog-mode

==============================================================================
CONTENTS                                               *verilog-mode*

1. Introduction         |verilog-mode-introduction|
2. Usage                |verilog-mode-usage|
3. Commands             |verilog-mode-commands|
4. Options              |verilog-mode-options|

==============================================================================
1. INTRODUCTION                                *verilog-mode-introduction*

`vim-verilog-mode` is a Vim plugin that integrates the powerful `AUTO`
expansion features of Emacs' verilog-mode. It works by calling an Emacs
process in the background to analyze the current buffer and update the `AUTO`
blocks, allowing you to stay within Vim for all your Verilog editing needs.

The plugin supports both asynchronous (non-blocking) execution on modern Vim
and Neovim, and a synchronous (blocking) fallback for older Vim 7 versions.

==============================================================================
2. USAGE                                               *verilog-mode-usage*

The plugin's key mappings are only active in buffers with the 'verilog'
filetype.

`ta` (Default Mode)
    Adds or updates all `/* AUTO */` blocks in the current file. This mode
    only loads your `~/.emacs` and the core `verilog-mode.el` script.

`td` (Default Mode)
    Deletes all `/* AUTO */` blocks in the current file using the default mode.

`tA` (Extra Mode)
    Adds or updates all `/* AUTO */` blocks, and additionally loads your
    custom elisp files defined in `g:verilog_mode_extra_elisp_scripts`.

`tD` (Extra Mode)
    Deletes all `/* AUTO */` blocks using the extra mode.

==============================================================================
3. COMMANDS                                            *verilog-mode-commands*

*:VerilogAutoAdd*
    Default mode: Adds or updates all `AUTO` blocks. Equivalent to `ta`.

*:VerilogAutoDelete*
    Default mode: Deletes all `AUTO` blocks. Equivalent to `td`.

*:VerilogAutoAddExtra*
    Extra mode: Adds or updates `AUTO` blocks, loading extra elisp files.
    Equivalent to `tA`.

*:VerilogAutoDeleteExtra*
    Extra mode: Deletes all `AUTO` blocks, loading extra elisp files.
    Equivalent to `tD`.

==============================================================================
4. OPTIONS                                             *verilog-mode-options*

*'g:verilog_mode_map_auto_add'*
    Sets the key mapping for adding/updating `AUTO` blocks (default mode).
    Default: "ta"

*'g:verilog_mode_map_auto_delete'*
    Sets the key mapping for deleting `AUTO` blocks (default mode).
    Default: "td"

*'g:verilog_mode_map_auto_add_extra'*
    Sets the key mapping for adding/updating `AUTO` blocks (extra mode).
    Default: "tA"

*'g:verilog_mode_map_auto_delete_extra'*
    Sets the key mapping for deleting `AUTO` blocks (extra mode).
    Default: "tD"

*'g:verilog_mode_emacs_executable'*
    Specifies the full path to the Emacs executable.
    Default: "emacs"

*'g:verilog_mode_elisp_script_path'*
    Specifies the full path to the Emacs Lisp script for Verilog mode.
    Default: "tools/verilog-mode.el.gz" within the plugin directory.

*'g:verilog_mode_extra_elisp_scripts'*
    A list of strings, where each string is a path to an additional Emacs
    Lisp script to load. These are *only* loaded when using the "extra" mode
    mappings (`tA`, `tD`) or commands (`:VerilogAutoAddExtra`).
    Default: []

*'g:verilog_mode_force_sync'*
    If set to `1`, the plugin will always use the synchronous (blocking)
    execution mode.
    Default: 0

==============================================================================
 vim:tw=78:ts=8:ft=help: